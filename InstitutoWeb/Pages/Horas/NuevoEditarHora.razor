@inject IGenericService<Hora> horaService
@inject SweetAlertService SweetAlert


@if (horaEdit == null )
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="background-color: @(isEditing ? "lightyellow": "white")">
        <EditForm Model="horaEdit" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Desde:</label>
                    <input type="time" @bind-value="currentDesde"  class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Hasta:</label>
                    <input type="time" @bind-value="currentHasta"  class="form-control" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Recreo:</label>
                    <InputCheckbox @bind-Value="horaEdit.EsRecreo" class="form-check" />
                </div>
                <ValidationSummary />
                <ButtonsGuardarCancelar isEditing="@isEditing"  OnCancelar="HandleCancelar" />
            </div>
        </div>
    </EditForm>
    </div>
}
@code {

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    [Parameter]
    public EventCallback OnCancelar { get; set; }

    [Parameter]
    public Hora? Hora { get; set; }

    public Hora? horaEdit { get; set; }

    public DateTime currentDesde { get; set; } 
    public DateTime currentHasta { get; set; } 

    private bool isEditing => Hora != null;

    private List<Hora>? horas { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Hora == null)
        {
            horaEdit = new Hora();
        } else
        {
            Hora.CopyPropertiesTo(horaEdit);
            currentDesde = new DateTime(1, 1, 1, horaEdit.Desde.Hour, horaEdit.Desde.Minute, 0);
            currentHasta = new DateTime(1, 1, 1, horaEdit.Hasta.Hour, horaEdit.Hasta.Minute, 0);
        }


        StateHasChanged();
    }






    private async Task Guardar()
    {
        // logger.LogInformation($"la variable isEditing={isEditing} y el anio lectivo={anioLectivoEdit?.ToString()}");
        horaEdit.Desde = new DateTime(1, 1, 1, currentDesde.Hour, currentDesde.Minute, 0);
        horaEdit.Hasta = new DateTime(1, 1, 1, currentHasta.Hour, currentHasta.Minute, 0);
        
        if (isEditing)
                await horaService.UpdateAsync(horaEdit);
            else
            await horaService.AddAsync(horaEdit);
       await OnGuardar.InvokeAsync();
    }

    private async Task HandleCancelar()
    {
        await OnCancelar.InvokeAsync();
    }
}

